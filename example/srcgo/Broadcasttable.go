// Generated by g.f.com/flora/weiss/tabtoy
// Version: v1.0.23
// DO NOT EDIT!!
package table

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

// Defined in table: BroadcastTable
type BroadcastTable struct {

	// Broadcast
	Broadcast []*BroadcastDefine
}

// Defined in table: Broadcast
type BroadcastDefine struct {

	// 播报页码ID
	ID uint32
}

// BroadcastTable 访问接口
type BroadcastTableTable struct {

	// 表格原始数据
	BroadcastTable

	// 索引函数表
	indexFuncByName map[string][]func(*BroadcastTableTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*BroadcastTableTable) error

	// 加载前回调
	preFuncList []func(*BroadcastTableTable) error

	// 加载后回调
	postFuncList []func(*BroadcastTableTable) error

	// 索引ID
	BroadcastByID map[uint32]*BroadcastDefine
}

// 从json文件加载
func (self *BroadcastTableTable) Load(filename string) error {
	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	return self.LoadData(data)
}

// 从二进制加载
func (self *BroadcastTableTable) LoadData(data []byte) error {

	var newTab BroadcastTable

	// 读取
	err := json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.BroadcastTable = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *BroadcastTableTable) RegisterIndexEntry(name string, indexCallback func(*BroadcastTableTable) error, clearCallback func(*BroadcastTableTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *BroadcastTableTable) RegisterPreEntry(callback func(*BroadcastTableTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *BroadcastTableTable) RegisterPostEntry(callback func(*BroadcastTableTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个BroadcastTable表读取实例
func NewBroadcastTableTable() *BroadcastTableTable {
	return &BroadcastTableTable{

		indexFuncByName: map[string][]func(*BroadcastTableTable) error{

			"Broadcast": {func(tab *BroadcastTableTable) error {

				// Broadcast
				for _, def := range tab.Broadcast {

					if _, ok := tab.BroadcastByID[def.ID]; ok {
						panic(fmt.Sprintf("duplicate index in BroadcastByID: %v", def.ID))
					}

					tab.BroadcastByID[def.ID] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*BroadcastTableTable) error{

			"Broadcast": {func(tab *BroadcastTableTable) error {

				// Broadcast

				tab.BroadcastByID = make(map[uint32]*BroadcastDefine)

				return nil
			}},
		},

		BroadcastByID: make(map[uint32]*BroadcastDefine),
	}
}
