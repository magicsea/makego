// Generated by g.f.com/flora/weiss/tabtoy
// Version: 0.0.0
// DO NOT EDIT!!
using PlasticGui.WorkspaceWindow;
using System.Collections.Generic;
using tabtoy;

namespace Table
{

	public static partial class EnumAlias {
		
	}


	
	

	// Defined in table: ConstTable
	
	public partial class ConstTable : ITable
	{
		/// <summary> 
		/// Const
		/// </summary>
		public List<ConstDefine> Const = new List<ConstDefine>(); // 
	
	
		#region Index code
	 	Dictionary<string, ConstDefine> _ConstByID = new Dictionary<string, ConstDefine>();
        public ConstDefine GetConstByID(string ID, ConstDefine def = default(ConstDefine))
        {
            ConstDefine ret;
            if ( _ConstByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ConstDefine) )
			{
				
			}

            return def;
        }
		
		public string GetBuildID(){
			return "3a884c17efd0e2a5a8995fbfc84e914d";
		}
        public string GetTableName()
        {
            return "ConstTable";
        }
        #endregion
        #region Deserialize code

        static DeserializeHandler<ConstTable> _ConstTableDeserializeHandler;
		public static DeserializeHandler<ConstTable> ConstTableDeserializeHandler
		{
			get
			{
				if (_ConstTableDeserializeHandler == null )
				{
					_ConstTableDeserializeHandler = new DeserializeHandler<ConstTable>(DeserializeConstTable);
				}

				return _ConstTableDeserializeHandler;
			}
		}
		public static void DeserializeConstTable( ConstTable ins, DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Const.Add( reader.ReadStruct<ConstDefine>(ConstDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build Const Index
			for( int i = 0;i< ins.Const.Count;i++)
			{
				var element = ins.Const[i];
				
				ins._ConstByID.Add(element.ID, element);
				
			}
			
		}
		static DeserializeHandler<ConstDefine> _ConstDefineDeserializeHandler;
		public static DeserializeHandler<ConstDefine> ConstDefineDeserializeHandler
		{
			get
			{
				if (_ConstDefineDeserializeHandler == null )
				{
					_ConstDefineDeserializeHandler = new DeserializeHandler<ConstDefine>(DeserializeConstDefine);
				}

				return _ConstDefineDeserializeHandler;
			}
		}
		public static void DeserializeConstDefine( ConstDefine ins, DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60000:
                	{
						ins.ID = reader.ReadString();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.IntVal = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.IntArrVal.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x50003:
                	{
						ins.FloatVal = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.FloatArrVal.Add( reader.ReadFloat() );
                	}
                	break; 
                	case 0x60005:
                	{
						ins.StringVal = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
				Const.Clear(); 
			
				_ConstByID.Clear(); 
		}
		#endregion
	

	} 

	// Defined in table: Const
	[System.Serializable]
	public partial class ConstDefine
	{
		
		/// <summary> 
		/// ID
		/// </summary>
		public string ID = ""; // 
		
		/// <summary> 
		/// int值
		/// </summary>
		public int IntVal = 0; // 
		
		/// <summary> 
		/// int数组值
		/// </summary>
		public List<int> IntArrVal = new List<int>(); // 
		
		/// <summary> 
		/// float值
		/// </summary>
		public float FloatVal = 0f; // 
		
		/// <summary> 
		/// float数组值
		/// </summary>
		public List<float> FloatArrVal = new List<float>(); // 
		
		/// <summary> 
		/// string值
		/// </summary>
		public string StringVal = ""; // 
	
	

	} 

}
